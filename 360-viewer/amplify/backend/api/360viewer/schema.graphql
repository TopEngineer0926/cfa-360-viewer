type Pano
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["360Admin"] }
    ]
  ) {
  id: ID!
  title: String!
  thumbnail: String
  pabout: String
  ptype: String
  psize: String
  sceneArr: [SceneObject]
  createdAt: String
  updatedAt: String
}

type SceneObject {
  id: ID!
  title: String
  img: String
  hotSpots: [hotSpotObject]
}

type hotSpotObject {
  id: ID!
  pitch: String!
  yaw: Float!
  type: Float!
  layer: String
  targetYaw: Float
  targetPitch: Float
  text: String
  sceneId: ID
}

# type Scene
#   @model
#   @auth(
#     rules: [
#       { allow: private, operations: [read] }
#       { allow: groups, groups: ["360Admin"] }
#     ]
#   )
#   @key(name: "byPano", fields: ["panoID"]) {
#   id: ID!
#   panoID: ID!
#   pano: Pano @connection(fields: ["panoID"])
#   title: String!
#   img: String!
#   spots: [Spot]
#   createdAt: String
#   updatedAt: String
# }

type SpotContent {
  name: String
  type: String
  content: String
  link: String
}

type Spot
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["360Admin"] }
    ]
  ) {
  id: ID! #same as spotID
  contents: [SpotContent]
  comments: [Comment]
    @connection(keyName: "bySpot", fields: ["id"], sortField: "updatedAt")
  createdAt: String
  updatedAt: String
}

type Comment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: groups, groups: ["360Admin"] }
    ]
  )
  @key(name: "bySpot", fields: ["spotID"]) {
  id: ID!
  owner: ID!
  spotID: ID!
  msg: String
  # reply: String
  # repliedAt: String
  createdAt: String
  updatedAt: String
}
